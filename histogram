#!awk -f
# This script prints a histogram to STDOUT based on the input data.
#
# Usage:
#
#     histogram -v b=RANGE [-v scale=SCALE]
#
# Options:
#
# RANGE   from:to:step (Python style)
# SCALE   postive integer (DEFAULT=50)
#
BEGIN {
  # Parse string of bins to array.
  split(b,ran,":")
 
  # Default to step size 1.
  if (ran[3]==0) {
    ran[3]=1
  }

  reverse=0
  if (ran[2]<ran[1]) {
    reverse=1
    if (ran[3]>0) {
      print "error: step size should be a negative number"
      exit(1);
    }
  } else {
    if (ran[3]<0) {
      print "error: step size should be a positive number"
      exit(1);
    }

  }

  # Calculate number of bins.
  n=(ran[2]-ran[1])/ran[3]
  n=(n==int(n)) ? n : int(n)+1

  # Define bins from (ascending).
  if (reverse==0) {
    m = 1
    for (i=ran[1];i<ran[2];i=i+ran[3]) {
      bins[m]=i
      m++
    } 
  } else {
   m = n
   for (i=ran[1];i>ran[2];i=i+ran[3]) {
      bins[m]=i
      m--
    }
  }


  # Max length of bins in characters.
  leng=0
  for (i in bins) {
    if (length(bins[i]>leng)) {
      leng=length(bins[i])
    }
  }
}


{	
  # Calculate max.
  if (NR==1) {
    max=$1
  } else { 
    max=(max>$1)?max:$1
  }

  # Calculate min.
  if (NR==1) {
    min=$1
  } else { 
    min=(min>$1)?$1:min
  }

  for (i=1;i<=n;i++) {
    if ($1 < bins[i]) {
      h[i]++
      break
    }
  }
}


END {
  # Max length of bar. Used for scaling.
  max_bar=0	
  for (i=1;i<=n;i++) {
    if (h[i]>max_bar) {
      max_bar=h[i]
    }
  }

  # Scale.
  if (scale=="") {
    scale=max_bar
    if (scale>50) {
      scale=50
    }
  }

  # Output.
  printf "\nmin = %.2f\nmax = %.2f\n\n", min, max
  if (reverse==0) {
    last=bins[1]
    for (j=2;j<=n;j++) {
      print_bins(last,bins[j],h[j])
      last=bins[j]
    }
  } else {
    last=bins[n]
    for (j=n-1;j>0;j--) {
      print_bins(bins[j],last,h[j+1])
      last=bins[j]
    }
  }
}

function print_bins(from, to, value) {
    printf "%*s - %*s: ", leng, from,leng, to
    h_scaled=(value/max_bar)*scale
    for (k=0;k<int(h_scaled);k++) {
      printf "█"
    }
    # If the output is scaled, we might end up with fractions.
    # We try to be accurate up to 1/4 of a block.
    frac=h_scaled - int(h_scaled)
    if (frac > 1-0.125) {
      printf "█"
    } else if (frac > 0.75-0.125) {
      printf "▊" 
    } else if (frac > 0.5-0.125) {
      printf "▌"
    } else if (frac > 0.25-0.125) {
      printf "▎"
    }
    c = (value!="") ? value : 0
    printf " (" c ")"
    printf "\n"
}

